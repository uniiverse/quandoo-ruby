=begin
#Quandoo API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'spec_helper'
require 'json'

# Unit tests for Quandoo::MenusApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MenusApi' do
  before do
    # run before each test
    @instance = Quandoo::MenusApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MenusApi' do
    it 'should create an instance of MenusApi' do
      expect(@instance).to be_instance_of(Quandoo::MenusApi)
    end
  end

  # unit tests for add_preordered_items1
  # Add/remove menu items to/from a reservation&#39;s preorders
  # This endpoint will add/remove menu items to/from preorders of a reservation.   If an item already exists, the quantitiy specified for the item will be added to the existing quantity.  For example, if an item has a quantity of 2, and a PATCH request specifies the same item with a quantity of 1, the result will be a quantity of 3 for that item.  This can be also used to remove items, by specifying a negative quantity. For example, if an item has a quantity of 2, and a PATCH request specifies the same item with a quantity of -1, the result will be a quantity of 1.  No item can have a negative quantity in the end, which means a PATCH request with a quantity of -5 for an item that currently has a quantity of 2, will result in that item to be simply deleted from the preorder, instead of having a final quantity of -3.  If an item does not exist in the current preorders, it will be added, provided it has a positive quantity.   The reservation ID in the request is the public ID of the reservation and **not** agent-specific.  This endpoint requires user to be logged in.  The endpoint will return &#x60;HTTP 404 - Not Found&#x60; if the reservation with the specified id could not be found. It will return &#x60;HTTP 403 - Forbidden&#x60; if the user is not authenticated or the reservation doesn&#39;t belong to the customer associated with the user.  ####Request: * **reservationId**: Public ID of the reservation. Path parameter.  Request body has the same structure as Get Preorder response, except not having the &#x60;href&#x60; field. * **items**: List of menu items to be edited. Each menu item will have the fields explained below.   * **menuId**: The Id of the menu that this item belongs to. **Required**.   * **itemId**: The Id of the menu item. **Required**.   * **quantity**: Change in quantity to be applied to the existing item&#39;s quantity. See above for explanation. **Required**.   * **guestPublicId**: The ID of the guest for whom this item is being preordered. Optional. Format: UUID.  ####Response: * **items**: The response will be a _list_ of successfully preordered menu items. Each menu item has the fields explained below:   * **menuId**: The Id of the menu that this item belongs to   * **itemId**: The Id of the menu item   * **quantity**: Quantity of this menu item selected for the reservation   * **guestPublicId**: The ID of the guest for whom this item has been preordered, if any.   * **href**: Link that can be followed to get information about the menu and its available items  Example curl: &#x60;&#x60;&#x60; curl -H \&quot;Content Type: application/json\&quot; -X PATCH -d &#39; {   \&quot;items\&quot;: [     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1477,       \&quot;quantity\&quot;: 1,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;     },     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1478,       \&quot;quantity\&quot;: -1     }   ] } &#39; https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/preorders &#x60;&#x60;&#x60;  Example response:  &#x60;&#x60;&#x60; {   \&quot;items\&quot;: [     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1477,       \&quot;quantity\&quot;: 2,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     },     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1478,       \&quot;quantity\&quot;: 1,       \&quot;guestPublicId\&quot;: \&quot;f871d6d7-e92e-4672-b24a-edb76963073b\&quot;,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     }   ] } &#x60;&#x60;&#x60; 
  # @param reservation_id Public Id of the reservation
  # @param body Menu items to add
  # @param [Hash] opts the optional parameters
  # @return [ReservationMenuData]
  describe 'add_preordered_items1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_menus_for_reservation1
  # Get all available menus for a reservation
  # This endpoint will return the available menus for a reservation.  The reservation ID in the request is the public ID of the reservation and **not** agent-specific.  This endpoint requires user to be logged in.  The endpoint will return &#x60;HTTP 404 - Not Found&#x60; if the reservation with the specified id could not be found. It will return &#x60;HTTP 403 - Forbidden&#x60; if the user is not authenticated or the reservation doesn&#39;t belong to the customer associated with the user.  ####Request: * **reservationId**: Public Id of the reservation * **locale**: Locale for translated info. Default: _en_  ####Response: The response will be a _list_ of available menus. Each menu has the fields explained below: * **id**: The unique id of the menu * **name**: The name or title of the menu * **description**: Menu description * **price**: Total price for the menu * **sortOrder**: The order in which this menu should be displayed * **categories**: Categories of the menu   * **id**: The Id of the menu category   * **name**: Name or title of the menu category   * **items**: Items inside the menu category     * **id**: Id of the menu item     * **name**: Name of menu item     * **description**: Menu item description     * **price**: Item price  Example curl: &#x60;&#x60;&#x60; curl https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus?locale&#x3D;en &#x60;&#x60;&#x60;  Example response:  &#x60;&#x60;&#x60; {   \&quot;menus\&quot;: [     {       \&quot;id\&quot;: 1836,       \&quot;name\&quot;: \&quot;special menu 1\&quot;,       \&quot;price\&quot;: \&quot;100.00\&quot;,       \&quot;sortOrder\&quot;: 0,       \&quot;categories\&quot;: [         {           \&quot;id\&quot;: 1109,           \&quot;name\&quot;: \&quot;starters\&quot;,           \&quot;items\&quot;: [             {               \&quot;id\&quot;: 1469,               \&quot;name\&quot;: \&quot;fries\&quot;,               \&quot;price\&quot;: \&quot;20.00\&quot;             }           ]         },         {           \&quot;id\&quot;: 1110,           \&quot;name\&quot;: \&quot;fish\&quot;,           \&quot;items\&quot;: [             {               \&quot;id\&quot;: 1470,               \&quot;name\&quot;: \&quot;salmon\&quot;,               \&quot;price\&quot;: \&quot;60.00\&quot;             }           ]         },         {           \&quot;id\&quot;: 1111,           \&quot;name\&quot;: \&quot;dessert\&quot;,           \&quot;items\&quot;: [             {               \&quot;id\&quot;: 1471,               \&quot;name\&quot;: \&quot;sundae\&quot;,               \&quot;price\&quot;: \&quot;20.00\&quot;             }           ]         }       ]     }   ] } &#x60;&#x60;&#x60; 
  # @param reservation_id Public Id of the reservation
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale for translated info
  # @return [MerchantMenusDto]
  describe 'find_menus_for_reservation1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_menu_for_reservation1
  # Get information about an available reservation menu
  # This endpoint will return details for a single available menu.  The reservation ID in the request is the public ID of the reservation and **not** agent-specific.  This endpoint requires user to be logged in.  The endpoint will return &#x60;HTTP 404 - Not Found&#x60; if the reservation or menu with the specified id could not be found. It will return &#x60;HTTP 403 - Forbidden&#x60; if the user is not authenticated or the reservation doesn&#39;t belong to the customer associated with the user.  ####Request: * **reservationId**: Public id of the reservation * **menuId**: Id of the menu * **locale**: Locale for translated info. Default: _en_  ####Response: The response will be a menu with each field as explained below: * **id**: The unique id of the menu * **name**: The name or title of the menu * **description**: Menu description * **price**: Total price for the menu * **sortOrder**: The order in which this menu should be displayed * **categories**: Categories of the menu   * **id**: The id of the menu category   * **name**: Name or title of the menu category   * **items**: Items inside the menu category     * **id**: Id of the menu item     * **name**: Name of menu item     * **description**: Menu item description     * **price**: Item price  Example curl: &#x60;&#x60;&#x60; curl https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1836?locale&#x3D;en &#x60;&#x60;&#x60;  Example response:  &#x60;&#x60;&#x60; {   \&quot;id\&quot;: 1836,   \&quot;name\&quot;: \&quot;special menu 1\&quot;,   \&quot;price\&quot;: \&quot;100.00\&quot;,   \&quot;sortOrder\&quot;: 0,   \&quot;categories\&quot;: [     {       \&quot;id\&quot;: 1109,       \&quot;name\&quot;: \&quot;starters\&quot;,       \&quot;items\&quot;: [         {           \&quot;id\&quot;: 1469,           \&quot;name\&quot;: \&quot;fries\&quot;,           \&quot;price\&quot;: \&quot;20.00\&quot;         }       ]     },     {       \&quot;id\&quot;: 1110,       \&quot;name\&quot;: \&quot;fish\&quot;,       \&quot;items\&quot;: [         {           \&quot;id\&quot;: 1470,           \&quot;name\&quot;: \&quot;salmon\&quot;,           \&quot;price\&quot;: \&quot;60.00\&quot;         }       ]     },     {       \&quot;id\&quot;: 1111,       \&quot;name\&quot;: \&quot;dessert\&quot;,       \&quot;items\&quot;: [         {           \&quot;id\&quot;: 1471,           \&quot;name\&quot;: \&quot;sundae\&quot;,           \&quot;price\&quot;: \&quot;20.00\&quot;         }       ]     }   ] } &#x60;&#x60;&#x60; 
  # @param reservation_id Public Id of the reservation
  # @param menu_id Id of the menu
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale for translated info
  # @return [MerchantMenuDto]
  describe 'get_menu_for_reservation1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_preordered_items1
  # Get preorders of a reservation
  # This endpoint will return the preordered menu items of a reservation.   The reservation ID in the request is the public ID of the reservation and **not** agent-specific.  This endpoint requires user to be logged in.  The endpoint will return &#x60;HTTP 404 - Not Found&#x60; if the reservation with the specified id could not be found. It will return &#x60;HTTP 403 - Forbidden&#x60; if the user is not authenticated or the reservation doesn&#39;t belong to the customer associated with the user.  ####Request: * **reservationId**: Public ID of the reservation  ####Response: The response will be a _list_ of menu items. Each menu item has the fields explained below: * **menuId**: The Id of the menu that this item belongs to * **itemId**: The Id of the menu item * **quantity**: Quantity of this menu item selected for the reservation * **guestPublicId**: The ID of the guest for whom this item has been preordered, if any. * **href**: Link that can be followed to get information about the menu and its available items  Example curl: &#x60;&#x60;&#x60; curl https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/preorders &#x60;&#x60;&#x60;  Example response:  &#x60;&#x60;&#x60; {   \&quot;items\&quot;: [     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1477,       \&quot;quantity\&quot;: 1,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     },     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1478,       \&quot;quantity\&quot;: 2,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     }   ] } &#x60;&#x60;&#x60; 
  # @param reservation_id Public Id of the reservation
  # @param [Hash] opts the optional parameters
  # @return [ReservationMenuData]
  describe 'get_preordered_items1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_preordered_items1
  # Preorder menu items for a reservation
  # This endpoint will preorder menu items for a reservation.   The reservation ID in the request is the public ID of the reservation and **not** agent-specific.  This endpoint requires user to be logged in.  The endpoint will return &#x60;HTTP 404 - Not Found&#x60; if the reservation with the specified id could not be found. It will return &#x60;HTTP 403 - Forbidden&#x60; if the user is not authenticated or the reservation doesn&#39;t belong to the customer associated with the user.  ####Request: * **reservationId**: Public ID of the reservation. Path parameter.  Request body has the same structure as Get Preorder response, except not having the &#x60;href&#x60; field. * **items**: List of menu items to be preordered. Each menu item will have the fields explained below.   * **menuId**: The Id of the menu that this item belongs to. **Required**.   * **itemId**: The Id of the menu item. **Required**.   * **quantity**: Number of specified items to be preordered. **Required**.   * **guestPublicId**: The ID of the guest for whom this item is being preordered. Optional. Format: UUID.  ####Response: * **items**: The response will be a _list_ of successfully preordered menu items. Each menu item has the fields explained below:   * **menuId**: The Id of the menu that this item belongs to   * **itemId**: The Id of the menu item   * **quantity**: Quantity of this menu item selected for the reservation   * **guestPublicId**: The ID of the guest for whom this item has been preordered, if any.   * **href**: Link that can be followed to get information about the menu and its available items  Example curl: &#x60;&#x60;&#x60; curl -H \&quot;Content Type: application/json\&quot; -X PUT -d &#39; {   \&quot;items\&quot;: [     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1477,       \&quot;quantity\&quot;: 1,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;     },     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1478,       \&quot;quantity\&quot;: 2     }   ] } &#39; https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/preorders &#x60;&#x60;&#x60;  Example response:  &#x60;&#x60;&#x60; {   \&quot;items\&quot;: [     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1477,       \&quot;quantity\&quot;: 1,       \&quot;guestPublicId\&quot;: \&quot;a8a66a11-446a-443b-8834-591742825ad4\&quot;,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     },     {       \&quot;menuId\&quot;: 1846,       \&quot;itemId\&quot;: 1478,       \&quot;quantity\&quot;: 2,       \&quot;href\&quot;: \&quot;https://{host}/v{X}/reservations/ce0706ff-a95d-4229-a220-d21dcd175342/menus/1846\&quot;     }   ] } &#x60;&#x60;&#x60; 
  # @param reservation_id Public Id of the reservation
  # @param body Menu items for this reservation
  # @param [Hash] opts the optional parameters
  # @return [ReservationMenuData]
  describe 'save_preordered_items1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
