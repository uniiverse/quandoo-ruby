=begin
#Quandoo API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module Quandoo
  class AvailabilitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get merchant availability days
    # This endpoint returns days which a customer can select for his reservation. The response is based on when the merchant is known to be open. It is not guaranteed that they have available times for reservation. The days are returned starting from the first available day up to the merchant-defined limit, but never more than 365 days.  ####Request parameters: * **merchantId**: Id of the merchant. Path parameter. * **agentId**: Id of the agent making the request * **capacity**: Specifies the number of people in reservation. Availability days will be returned based on this capacity.  ####Response: The response returns availability days that could be selected for reservation.  * **days**: List of availability days that could be reserved. Format: yyyy-MM-dd  * **links**: Related links that can be followed based on this response.  ####Example curl: ``` curl https://{host}/v{X}/merchants/15/availabilities?agentId=3&capacity=4 ```   ####Example response: ``` {   \"days\": [     \"2017-01-01\",     \"2017-01-02\",     \"2017-01-03\",      ...   ],   \"links\": [     {       \"href\": \"https://{host}/v{X}/merchants/15\",       \"method\": \"GET\",       \"rel\": \"parent\"     },     {       \"href\": \"https://{host}/v{X}/merchants/15/reservation-settings\",       \"method\": \"GET\",       \"rel\": \"settings\"     },     {       \"href\": \"https://{host}/v{X}/merchants/15/availabilities/2017-01-01/times\",       \"method\": \"GET\",       \"rel\": \"availabilities\"     }   ] } ```
    # @param merchant_id Id of the merchant
    # @param agent_id Id of the agent
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :capacity Number of people
    # @return [MerchantAvailabilityDaysDto]
    def availability_days1(merchant_id, agent_id, opts = {})
      data, _status_code, _headers = availability_days1_with_http_info(merchant_id, agent_id, opts)
      data
    end

    # Get merchant availability days
    # This endpoint returns days which a customer can select for his reservation. The response is based on when the merchant is known to be open. It is not guaranteed that they have available times for reservation. The days are returned starting from the first available day up to the merchant-defined limit, but never more than 365 days.  ####Request parameters: * **merchantId**: Id of the merchant. Path parameter. * **agentId**: Id of the agent making the request * **capacity**: Specifies the number of people in reservation. Availability days will be returned based on this capacity.  ####Response: The response returns availability days that could be selected for reservation.  * **days**: List of availability days that could be reserved. Format: yyyy-MM-dd  * **links**: Related links that can be followed based on this response.  ####Example curl: &#x60;&#x60;&#x60; curl https://{host}/v{X}/merchants/15/availabilities?agentId&#x3D;3&amp;capacity&#x3D;4 &#x60;&#x60;&#x60;   ####Example response: &#x60;&#x60;&#x60; {   \&quot;days\&quot;: [     \&quot;2017-01-01\&quot;,     \&quot;2017-01-02\&quot;,     \&quot;2017-01-03\&quot;,      ...   ],   \&quot;links\&quot;: [     {       \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/15\&quot;,       \&quot;method\&quot;: \&quot;GET\&quot;,       \&quot;rel\&quot;: \&quot;parent\&quot;     },     {       \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/15/reservation-settings\&quot;,       \&quot;method\&quot;: \&quot;GET\&quot;,       \&quot;rel\&quot;: \&quot;settings\&quot;     },     {       \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/15/availabilities/2017-01-01/times\&quot;,       \&quot;method\&quot;: \&quot;GET\&quot;,       \&quot;rel\&quot;: \&quot;availabilities\&quot;     }   ] } &#x60;&#x60;&#x60;
    # @param merchant_id Id of the merchant
    # @param agent_id Id of the agent
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :capacity Number of people
    # @return [Array<(MerchantAvailabilityDaysDto, Fixnum, Hash)>] MerchantAvailabilityDaysDto data, response status code and response headers
    def availability_days1_with_http_info(merchant_id, agent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AvailabilitiesApi.availability_days1 ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling AvailabilitiesApi.availability_days1"
      end
      # verify the required parameter 'agent_id' is set
      if @api_client.config.client_side_validation && agent_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_id' when calling AvailabilitiesApi.availability_days1"
      end
      # resource path
      local_var_path = '/v1/merchants/{merchantId}/availabilities'.sub('{' + 'merchantId' + '}', merchant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'agentId'] = agent_id
      query_params[:'capacity'] = opts[:'capacity'] if !opts[:'capacity'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MerchantAvailabilityDaysDto')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AvailabilitiesApi#availability_days1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get merchant availability time slots
    # This endpoint returns availability time slots which can be reserved for a given capacity.  ####Request parameters: * **merchantId**: Id of the merchant. Path parameter. * **date**: Specifies date of the desired reservation. Format: `yyyy-MM-dd`. Path parameter. * **fromTime**: Beginning of the desired reservation time frame. Format: `HH:mm`. Optional. * **toTime**: End of the desired reservation time frame. Format: `HH:mm`. Optional. * **agentId**: Id of the agent making the request * **capacity**: Specifies the number of people in reservation. Availabilities will be returned based on this capacity. If not provided, the default value is 2. * **areaId**: Restricts availabilities to a certain area. Optional. * **dealId/dealType**: Filter availabilities for a certain deal. Optional. If used, both must be provided.     * **dealType** specifies type of the deal. Can be `OFFER`, `DISCOUNT` or `SPECIAL`.     * **dealId** specifies the ID of the deal.      ####Response: The response returns availability time slots that could be reserved, along with the areas it is associated with and contains information on how much should be paid if the reservation is cancelled by a client.   * **timeSlots**: List of available time slots.   * **areaIds**: List of areas for which this time slot can be reserved.   * **dateTime**: Date and time of the available slot. Format: `yyyy-MM-dd'T'HH:mm:ssZ`   * **occupancy**: Occupancy of the available time slot. This is an integer between `0` and `100`.   * **vaultSettingId**: ID of the vault setting, if there is any. See: `vaultSettings` * **vaultSettings**: Credit card vault settings representing the fees to be paid in case of cancellation.   * **id**: ID of the setting as shown in `timeSlots`.   * **fee**: Fee to be paid in case of cancellation. Currency is defined by merchant. See reservation-settings.   * **feeType**: Type of fee to be paid. Can be `PER_PERSON` or `PER_RESERVATION`.   * **feePercentageForTime**: Fee percentage depending of the time of cancellation. Format: `\"{hoursStart}-{hoursEnd}\": {percentage}` , where hours are the number of hours before the visit. * **links**: Related links that can be followed based on this response.  ####Example curl: ``` curl https://{host}/v{X}/merchants/15/availabilities/2017-11-09/times?capacity=2&areaId=24&agentId=3&dealId=ce0706ff-a95d-4229-a220-d21dcd175342&dealType=OFFER&fromTime=10:45&toTime=12:45 ```   ####Example response: ``` {      \"timeSlots\": [          {              \"areaIds\": [33532, 33533],              \"dateTime\": \"2017-09-27T10:45:00+01:00\",              \"occupancy\": 0,              \"vaultSettingId\": \"284d701f-f79a-4efa-9859-fd09851dfdce\"         },          ...      ],      \"vaultSettings\": [           {              \"id\": \"284d701f-f79a-4efa-9859-fd09851dfdce\",               \"fee\": \"10.00\",               \"feeType\": \"PER_PERSON\",               \"feePercentageForTime\":                  {                    \"0-12\":100,                    \"12-24\":50,                    \"24-48\":20                  }           }       ],      \"links\": [       {         \"href\": \"https://{host}/v{X}/merchants/15\",         \"method\": \"GET\",         \"rel\": \"parent\"       },       {         \"href\": \"https://{host}/v{X}/merchants/15/reservation-settings\",         \"method\": \"GET\",         \"rel\": \"reservation-settings\"       },       {         \"href\": \"https://{host}/v{X}/merchants/reservations\",         \"method\": \"PUT\",         \"rel\": \"create-reservation\"       }     ] }  ```
    # @param merchant_id Id of the merchant
    # @param agent_id Id of the agent
    # @param capacity Number of people
    # @param date Date of the desired reservation. Format: yyyy-MM-dd
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_time Beginning of the desired reservation time frame. Format: HH:mm
    # @option opts [String] :to_time End of the desired reservation time frame. Format: HH:mm
    # @option opts [Integer] :area_id Id of the area
    # @option opts [String] :deal_id Id of the deal
    # @option opts [String] :deal_type type of the deal - SPECIAL, DISCOUNT or OFFER
    # @return [MerchantAvailabilityDtoList]
    def availability_options1(merchant_id, agent_id, capacity, date, opts = {})
      data, _status_code, _headers = availability_options1_with_http_info(merchant_id, agent_id, capacity, date, opts)
      data
    end

    # Get merchant availability time slots
    # This endpoint returns availability time slots which can be reserved for a given capacity.  ####Request parameters: * **merchantId**: Id of the merchant. Path parameter. * **date**: Specifies date of the desired reservation. Format: &#x60;yyyy-MM-dd&#x60;. Path parameter. * **fromTime**: Beginning of the desired reservation time frame. Format: &#x60;HH:mm&#x60;. Optional. * **toTime**: End of the desired reservation time frame. Format: &#x60;HH:mm&#x60;. Optional. * **agentId**: Id of the agent making the request * **capacity**: Specifies the number of people in reservation. Availabilities will be returned based on this capacity. If not provided, the default value is 2. * **areaId**: Restricts availabilities to a certain area. Optional. * **dealId/dealType**: Filter availabilities for a certain deal. Optional. If used, both must be provided.     * **dealType** specifies type of the deal. Can be &#x60;OFFER&#x60;, &#x60;DISCOUNT&#x60; or &#x60;SPECIAL&#x60;.     * **dealId** specifies the ID of the deal.      ####Response: The response returns availability time slots that could be reserved, along with the areas it is associated with and contains information on how much should be paid if the reservation is cancelled by a client.   * **timeSlots**: List of available time slots.   * **areaIds**: List of areas for which this time slot can be reserved.   * **dateTime**: Date and time of the available slot. Format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60;   * **occupancy**: Occupancy of the available time slot. This is an integer between &#x60;0&#x60; and &#x60;100&#x60;.   * **vaultSettingId**: ID of the vault setting, if there is any. See: &#x60;vaultSettings&#x60; * **vaultSettings**: Credit card vault settings representing the fees to be paid in case of cancellation.   * **id**: ID of the setting as shown in &#x60;timeSlots&#x60;.   * **fee**: Fee to be paid in case of cancellation. Currency is defined by merchant. See reservation-settings.   * **feeType**: Type of fee to be paid. Can be &#x60;PER_PERSON&#x60; or &#x60;PER_RESERVATION&#x60;.   * **feePercentageForTime**: Fee percentage depending of the time of cancellation. Format: &#x60;\&quot;{hoursStart}-{hoursEnd}\&quot;: {percentage}&#x60; , where hours are the number of hours before the visit. * **links**: Related links that can be followed based on this response.  ####Example curl: &#x60;&#x60;&#x60; curl https://{host}/v{X}/merchants/15/availabilities/2017-11-09/times?capacity&#x3D;2&amp;areaId&#x3D;24&amp;agentId&#x3D;3&amp;dealId&#x3D;ce0706ff-a95d-4229-a220-d21dcd175342&amp;dealType&#x3D;OFFER&amp;fromTime&#x3D;10:45&amp;toTime&#x3D;12:45 &#x60;&#x60;&#x60;   ####Example response: &#x60;&#x60;&#x60; {      \&quot;timeSlots\&quot;: [          {              \&quot;areaIds\&quot;: [33532, 33533],              \&quot;dateTime\&quot;: \&quot;2017-09-27T10:45:00+01:00\&quot;,              \&quot;occupancy\&quot;: 0,              \&quot;vaultSettingId\&quot;: \&quot;284d701f-f79a-4efa-9859-fd09851dfdce\&quot;         },          ...      ],      \&quot;vaultSettings\&quot;: [           {              \&quot;id\&quot;: \&quot;284d701f-f79a-4efa-9859-fd09851dfdce\&quot;,               \&quot;fee\&quot;: \&quot;10.00\&quot;,               \&quot;feeType\&quot;: \&quot;PER_PERSON\&quot;,               \&quot;feePercentageForTime\&quot;:                  {                    \&quot;0-12\&quot;:100,                    \&quot;12-24\&quot;:50,                    \&quot;24-48\&quot;:20                  }           }       ],      \&quot;links\&quot;: [       {         \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/15\&quot;,         \&quot;method\&quot;: \&quot;GET\&quot;,         \&quot;rel\&quot;: \&quot;parent\&quot;       },       {         \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/15/reservation-settings\&quot;,         \&quot;method\&quot;: \&quot;GET\&quot;,         \&quot;rel\&quot;: \&quot;reservation-settings\&quot;       },       {         \&quot;href\&quot;: \&quot;https://{host}/v{X}/merchants/reservations\&quot;,         \&quot;method\&quot;: \&quot;PUT\&quot;,         \&quot;rel\&quot;: \&quot;create-reservation\&quot;       }     ] }  &#x60;&#x60;&#x60;
    # @param merchant_id Id of the merchant
    # @param agent_id Id of the agent
    # @param capacity Number of people
    # @param date Date of the desired reservation. Format: yyyy-MM-dd
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_time Beginning of the desired reservation time frame. Format: HH:mm
    # @option opts [String] :to_time End of the desired reservation time frame. Format: HH:mm
    # @option opts [Integer] :area_id Id of the area
    # @option opts [String] :deal_id Id of the deal
    # @option opts [String] :deal_type type of the deal - SPECIAL, DISCOUNT or OFFER
    # @return [Array<(MerchantAvailabilityDtoList, Fixnum, Hash)>] MerchantAvailabilityDtoList data, response status code and response headers
    def availability_options1_with_http_info(merchant_id, agent_id, capacity, date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AvailabilitiesApi.availability_options1 ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling AvailabilitiesApi.availability_options1"
      end
      # verify the required parameter 'agent_id' is set
      if @api_client.config.client_side_validation && agent_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_id' when calling AvailabilitiesApi.availability_options1"
      end
      # verify the required parameter 'capacity' is set
      if @api_client.config.client_side_validation && capacity.nil?
        fail ArgumentError, "Missing the required parameter 'capacity' when calling AvailabilitiesApi.availability_options1"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling AvailabilitiesApi.availability_options1"
      end
      if @api_client.config.client_side_validation && opts[:'deal_type'] && !['SPECIAL', 'DISCOUNT', 'OFFER'].include?(opts[:'deal_type'])
        fail ArgumentError, 'invalid value for "deal_type", must be one of SPECIAL, DISCOUNT, OFFER'
      end
      # resource path
      local_var_path = '/v1/merchants/{merchantId}/availabilities/{date}/times'.sub('{' + 'merchantId' + '}', merchant_id.to_s).sub('{' + 'date' + '}', date.to_s)

      # query parameters
      query_params = {}
      query_params[:'agentId'] = agent_id
      query_params[:'capacity'] = capacity
      query_params[:'fromTime'] = opts[:'from_time'] if !opts[:'from_time'].nil?
      query_params[:'toTime'] = opts[:'to_time'] if !opts[:'to_time'].nil?
      query_params[:'areaId'] = opts[:'area_id'] if !opts[:'area_id'].nil?
      query_params[:'dealId'] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      query_params[:'dealType'] = opts[:'deal_type'] if !opts[:'deal_type'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MerchantAvailabilityDtoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AvailabilitiesApi#availability_options1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
