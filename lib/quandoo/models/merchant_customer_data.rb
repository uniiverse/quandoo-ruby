=begin
#Quandoo API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'date'

module Quandoo
  class MerchantCustomerData
    # The id of the customer.
    attr_accessor :id

    # Customer reference 
    attr_accessor :customer_ref

    # Marketing flags for customer.
    attr_accessor :marketing_flags

    # Title of the customer.
    attr_accessor :title

    # First name of the customer.
    attr_accessor :first_name

    # Last name of the customer.
    attr_accessor :last_name

    # Email of the customer.
    attr_accessor :email

    # Fixed line phone number of the customer.
    attr_accessor :phone_number

    # Mobile phone number of the customer.
    attr_accessor :mobile_number

    # Locale of the customer.
    attr_accessor :locale

    # The links related to this entity.
    attr_accessor :links

    # The newsletter subscriptions, e.g. QUANDOO, MERCHANT.
    attr_accessor :subscriptions

    # Statistics about the customer
    attr_accessor :statistics

    # The date and time when the reservation will take place. Format: yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'customer_ref' => :'customerRef',
        :'marketing_flags' => :'marketingFlags',
        :'title' => :'title',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'email' => :'email',
        :'phone_number' => :'phoneNumber',
        :'mobile_number' => :'mobileNumber',
        :'locale' => :'locale',
        :'links' => :'links',
        :'subscriptions' => :'subscriptions',
        :'statistics' => :'statistics',
        :'updated_at' => :'updatedAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'customer_ref' => :'String',
        :'marketing_flags' => :'Array<MarketingSettingDto>',
        :'title' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'email' => :'String',
        :'phone_number' => :'String',
        :'mobile_number' => :'String',
        :'locale' => :'String',
        :'links' => :'Array<LinkRelationDto>',
        :'subscriptions' => :'Array<MerchantSubscription>',
        :'statistics' => :'CustomerStatisticsData',
        :'updated_at' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'customerRef')
        self.customer_ref = attributes[:'customerRef']
      end

      if attributes.has_key?(:'marketingFlags')
        if (value = attributes[:'marketingFlags']).is_a?(Array)
          self.marketing_flags = value
        end
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'phoneNumber')
        self.phone_number = attributes[:'phoneNumber']
      end

      if attributes.has_key?(:'mobileNumber')
        self.mobile_number = attributes[:'mobileNumber']
      end

      if attributes.has_key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'subscriptions')
        if (value = attributes[:'subscriptions']).is_a?(Array)
          self.subscriptions = value
        end
      end

      if attributes.has_key?(:'statistics')
        self.statistics = attributes[:'statistics']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @customer_ref.nil?
        invalid_properties.push('invalid value for "customer_ref", customer_ref cannot be nil.')
      end

      if @marketing_flags.nil?
        invalid_properties.push('invalid value for "marketing_flags", marketing_flags cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @phone_number.nil?
        invalid_properties.push('invalid value for "phone_number", phone_number cannot be nil.')
      end

      if @mobile_number.nil?
        invalid_properties.push('invalid value for "mobile_number", mobile_number cannot be nil.')
      end

      if @locale.nil?
        invalid_properties.push('invalid value for "locale", locale cannot be nil.')
      end

      if @links.nil?
        invalid_properties.push('invalid value for "links", links cannot be nil.')
      end

      if @subscriptions.nil?
        invalid_properties.push('invalid value for "subscriptions", subscriptions cannot be nil.')
      end

      if @statistics.nil?
        invalid_properties.push('invalid value for "statistics", statistics cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @customer_ref.nil?
      return false if @marketing_flags.nil?
      return false if @title.nil?
      return false if @first_name.nil?
      return false if @last_name.nil?
      return false if @email.nil?
      return false if @phone_number.nil?
      return false if @mobile_number.nil?
      return false if @locale.nil?
      return false if @links.nil?
      return false if @subscriptions.nil?
      return false if @statistics.nil?
      return false if @updated_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          customer_ref == o.customer_ref &&
          marketing_flags == o.marketing_flags &&
          title == o.title &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          email == o.email &&
          phone_number == o.phone_number &&
          mobile_number == o.mobile_number &&
          locale == o.locale &&
          links == o.links &&
          subscriptions == o.subscriptions &&
          statistics == o.statistics &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, customer_ref, marketing_flags, title, first_name, last_name, email, phone_number, mobile_number, locale, links, subscriptions, statistics, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Quandoo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
