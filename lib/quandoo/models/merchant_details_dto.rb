=begin
#Quandoo API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'date'

module Quandoo
  class MerchantDetailsDto
    # The id of the merchant.
    attr_accessor :id

    # The name of the merchant.
    attr_accessor :name

    # The phone number of the merchant.
    attr_accessor :phone_number

    # The currency of the merchant.
    attr_accessor :currency

    # The locale of the merchant.
    attr_accessor :locale

    # The timezone of the merchant.
    attr_accessor :timezone

    # The location of the merchant.
    attr_accessor :location

    # The review score of the merchant.
    attr_accessor :review_score

    # The tag groups this merchant belongs to.
    attr_accessor :tag_groups

    # The images this merchant has.
    attr_accessor :images

    # The documents this merchant has.
    attr_accessor :documents

    # The links related to this entity.
    attr_accessor :links

    # The flag indicates whether the merchant is bookable or not.
    attr_accessor :bookable

    # All opening times of the merchant.
    attr_accessor :opening_times

    # If true, credit card information is required when creating a reservation.
    attr_accessor :ccv_enabled

    # The chain of the merchant.
    attr_accessor :chain

    # The IVR forwarding phone number.
    attr_accessor :ivr_redirect_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'phone_number' => :'phoneNumber',
        :'currency' => :'currency',
        :'locale' => :'locale',
        :'timezone' => :'timezone',
        :'location' => :'location',
        :'review_score' => :'reviewScore',
        :'tag_groups' => :'tagGroups',
        :'images' => :'images',
        :'documents' => :'documents',
        :'links' => :'links',
        :'bookable' => :'bookable',
        :'opening_times' => :'openingTimes',
        :'ccv_enabled' => :'ccvEnabled',
        :'chain' => :'chain',
        :'ivr_redirect_number' => :'ivrRedirectNumber'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'phone_number' => :'String',
        :'currency' => :'String',
        :'locale' => :'String',
        :'timezone' => :'String',
        :'location' => :'LocationDto',
        :'review_score' => :'String',
        :'tag_groups' => :'Array<TagGroupDto>',
        :'images' => :'Array<ImageDto>',
        :'documents' => :'Array<DocumentDto>',
        :'links' => :'Array<LinkRelationDto>',
        :'bookable' => :'BOOLEAN',
        :'opening_times' => :'OpeningTimesDto',
        :'ccv_enabled' => :'BOOLEAN',
        :'chain' => :'ChainDto',
        :'ivr_redirect_number' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'phoneNumber')
        self.phone_number = attributes[:'phoneNumber']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'reviewScore')
        self.review_score = attributes[:'reviewScore']
      end

      if attributes.has_key?(:'tagGroups')
        if (value = attributes[:'tagGroups']).is_a?(Array)
          self.tag_groups = value
        end
      end

      if attributes.has_key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.has_key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'bookable')
        self.bookable = attributes[:'bookable']
      end

      if attributes.has_key?(:'openingTimes')
        self.opening_times = attributes[:'openingTimes']
      end

      if attributes.has_key?(:'ccvEnabled')
        self.ccv_enabled = attributes[:'ccvEnabled']
      end

      if attributes.has_key?(:'chain')
        self.chain = attributes[:'chain']
      end

      if attributes.has_key?(:'ivrRedirectNumber')
        self.ivr_redirect_number = attributes[:'ivrRedirectNumber']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @phone_number.nil?
        invalid_properties.push('invalid value for "phone_number", phone_number cannot be nil.')
      end

      if @timezone.nil?
        invalid_properties.push('invalid value for "timezone", timezone cannot be nil.')
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @review_score.nil?
        invalid_properties.push('invalid value for "review_score", review_score cannot be nil.')
      end

      if @links.nil?
        invalid_properties.push('invalid value for "links", links cannot be nil.')
      end

      if @bookable.nil?
        invalid_properties.push('invalid value for "bookable", bookable cannot be nil.')
      end

      if @opening_times.nil?
        invalid_properties.push('invalid value for "opening_times", opening_times cannot be nil.')
      end

      if @ccv_enabled.nil?
        invalid_properties.push('invalid value for "ccv_enabled", ccv_enabled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @phone_number.nil?
      return false if @timezone.nil?
      return false if @location.nil?
      return false if @review_score.nil?
      return false if @links.nil?
      return false if @bookable.nil?
      return false if @opening_times.nil?
      return false if @ccv_enabled.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          phone_number == o.phone_number &&
          currency == o.currency &&
          locale == o.locale &&
          timezone == o.timezone &&
          location == o.location &&
          review_score == o.review_score &&
          tag_groups == o.tag_groups &&
          images == o.images &&
          documents == o.documents &&
          links == o.links &&
          bookable == o.bookable &&
          opening_times == o.opening_times &&
          ccv_enabled == o.ccv_enabled &&
          chain == o.chain &&
          ivr_redirect_number == o.ivr_redirect_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, phone_number, currency, locale, timezone, location, review_score, tag_groups, images, documents, links, bookable, opening_times, ccv_enabled, chain, ivr_redirect_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Quandoo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
