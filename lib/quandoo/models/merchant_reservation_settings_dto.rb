=begin
#Quandoo API Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'date'

module Quandoo
  class MerchantReservationSettingsDto
    # List of all the areas defined for the merchant. Each area will contain:
    attr_accessor :area_ids

    # Number of guests allowed in a reservation
    attr_accessor :capacities

    # If true, a separate checkbox is displayed in the checkout for newsletter received from the restaurant
    attr_accessor :merchant_newsletter_selection_required

    # If true, we display available areas in a dropdown when a guest is making an online reservation
    attr_accessor :area_selection_required

    # If true, the restaurants allows enquiries
    attr_accessor :reservation_enquiry_enabled

    # Minimum number of guests for an enquiry
    attr_accessor :minimum_capacity_for_enquiries

    # Time slots displayed for making a reservation
    attr_accessor :online_reservation_interval

    # If true, special terms and conditions of the restaurant need to be confirmed upon making an online reservation
    attr_accessor :special_terms

    # Related links that can be followed based on this response
    attr_accessor :links

    # If true, the customer will receive an automatic email confirmation after he makes a reservation
    attr_accessor :automatic_confirmation

    # If true, credit card information is required when creating a reservation
    attr_accessor :ccv_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'area_ids' => :'areaIds',
        :'capacities' => :'capacities',
        :'merchant_newsletter_selection_required' => :'merchantNewsletterSelectionRequired',
        :'area_selection_required' => :'areaSelectionRequired',
        :'reservation_enquiry_enabled' => :'reservationEnquiryEnabled',
        :'minimum_capacity_for_enquiries' => :'minimumCapacityForEnquiries',
        :'online_reservation_interval' => :'onlineReservationInterval',
        :'special_terms' => :'specialTerms',
        :'links' => :'links',
        :'automatic_confirmation' => :'automaticConfirmation',
        :'ccv_enabled' => :'ccvEnabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'area_ids' => :'Array<AreaDto>',
        :'capacities' => :'Array<Integer>',
        :'merchant_newsletter_selection_required' => :'BOOLEAN',
        :'area_selection_required' => :'BOOLEAN',
        :'reservation_enquiry_enabled' => :'BOOLEAN',
        :'minimum_capacity_for_enquiries' => :'Integer',
        :'online_reservation_interval' => :'Integer',
        :'special_terms' => :'String',
        :'links' => :'Array<LinkRelationDto>',
        :'automatic_confirmation' => :'BOOLEAN',
        :'ccv_enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'areaIds')
        if (value = attributes[:'areaIds']).is_a?(Array)
          self.area_ids = value
        end
      end

      if attributes.has_key?(:'capacities')
        if (value = attributes[:'capacities']).is_a?(Array)
          self.capacities = value
        end
      end

      if attributes.has_key?(:'merchantNewsletterSelectionRequired')
        self.merchant_newsletter_selection_required = attributes[:'merchantNewsletterSelectionRequired']
      end

      if attributes.has_key?(:'areaSelectionRequired')
        self.area_selection_required = attributes[:'areaSelectionRequired']
      end

      if attributes.has_key?(:'reservationEnquiryEnabled')
        self.reservation_enquiry_enabled = attributes[:'reservationEnquiryEnabled']
      end

      if attributes.has_key?(:'minimumCapacityForEnquiries')
        self.minimum_capacity_for_enquiries = attributes[:'minimumCapacityForEnquiries']
      end

      if attributes.has_key?(:'onlineReservationInterval')
        self.online_reservation_interval = attributes[:'onlineReservationInterval']
      end

      if attributes.has_key?(:'specialTerms')
        self.special_terms = attributes[:'specialTerms']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'automaticConfirmation')
        self.automatic_confirmation = attributes[:'automaticConfirmation']
      end

      if attributes.has_key?(:'ccvEnabled')
        self.ccv_enabled = attributes[:'ccvEnabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          area_ids == o.area_ids &&
          capacities == o.capacities &&
          merchant_newsletter_selection_required == o.merchant_newsletter_selection_required &&
          area_selection_required == o.area_selection_required &&
          reservation_enquiry_enabled == o.reservation_enquiry_enabled &&
          minimum_capacity_for_enquiries == o.minimum_capacity_for_enquiries &&
          online_reservation_interval == o.online_reservation_interval &&
          special_terms == o.special_terms &&
          links == o.links &&
          automatic_confirmation == o.automatic_confirmation &&
          ccv_enabled == o.ccv_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [area_ids, capacities, merchant_newsletter_selection_required, area_selection_required, reservation_enquiry_enabled, minimum_capacity_for_enquiries, online_reservation_interval, special_terms, links, automatic_confirmation, ccv_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Quandoo.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
